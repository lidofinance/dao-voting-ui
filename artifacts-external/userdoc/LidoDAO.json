{
  "methods": {
    "initialize(address,address)": {
      "notice": "Initialize this kernel instance along with its ACL and set `_permissionsCreator` as the entity that can create other permissions"
    },
    "newAppInstance(bytes32,address)": {
      "notice": "Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`"
    },
    "newAppInstance(bytes32,address,bytes,bool)": {
      "notice": "Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`"
    },
    "newAppProxy(address,bytes32)": {
      "notice": "Create a new upgradeable app instance on `_kernel` with identifier `_appId`"
    },
    "newAppProxy(address,bytes32,bytes)": {
      "notice": "Create a new upgradeable app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`"
    },
    "newAppProxyPinned(address,bytes32)": {
      "notice": "Create a new pinned app instance on `_kernel` with identifier `_appId`"
    },
    "newAppProxyPinned(address,bytes32,bytes)": {
      "notice": "Create a new pinned app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`"
    },
    "newPinnedAppInstance(bytes32,address)": {
      "notice": "Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`."
    },
    "newPinnedAppInstance(bytes32,address,bytes,bool)": {
      "notice": "Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`"
    },
    "setApp(bytes32,bytes32,address)": {
      "notice": "Set the resolving address of `_appId` in namespace `_namespace` to `_app`"
    },
    "transferToVault(address)": {
      "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
    }
  }
}
