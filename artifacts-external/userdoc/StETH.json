{
  "methods": {
    "approve(address,uint256)": {
      "notice": "Sets `_amount` as the allowance of `_spender` over the caller's tokens."
    },
    "decreaseAllowance(address,uint256)": {
      "notice": "Atomically decreases the allowance granted to `_spender` by the caller by `_subtractedValue`.     * This is an alternative to `approve` that can be used as a mitigation for problems described in: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42 Emits an `Approval` event indicating the updated allowance.     * Requirements:     * - `_spender` cannot be the zero address. - `_spender` must have allowance for the caller of at least `_subtractedValue`. - the contract must not be paused."
    },
    "increaseAllowance(address,uint256)": {
      "notice": "Atomically increases the allowance granted to `_spender` by the caller by `_addedValue`.     * This is an alternative to `approve` that can be used as a mitigation for problems described in: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42 Emits an `Approval` event indicating the updated allowance.     * Requirements:     * - `_spender` cannot be the the zero address. - the contract must not be paused."
    },
    "transfer(address,uint256)": {
      "notice": "Moves `_amount` tokens from the caller's account to the `_recipient` account."
    },
    "transferFrom(address,address,uint256)": {
      "notice": "Moves `_amount` tokens from `_sender` to `_recipient` using the allowance mechanism. `_amount` is then deducted from the caller's allowance."
    },
    "transferShares(address,uint256)": {
      "notice": "Moves `_sharesAmount` token shares from the caller's account to the `_recipient` account."
    }
  }
}
